# Generated by Django 5.0.13 on 2025-09-30 13:18

import core.helper.media
import core.helper.models
import django.db.models.manager
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.UUIDField(default=core.helper.models.generate_uuid, editable=False, primary_key=True, serialize=False, unique=True)),
                ('visible', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
            options={
                'verbose_name': 'Amenity',
                'verbose_name_plural': 'Amenities',
                'ordering': ['-created_at'],
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='FavoriteProperty',
            fields=[
                ('id', models.UUIDField(default=core.helper.models.generate_uuid, editable=False, primary_key=True, serialize=False, unique=True)),
                ('visible', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Favorite Property',
                'verbose_name_plural': 'Favorite Properties',
                'ordering': ['-created_at'],
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.UUIDField(default=core.helper.models.generate_uuid, editable=False, primary_key=True, serialize=False, unique=True)),
                ('visible', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('last_contact', models.DateTimeField(blank=True, null=True)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('New', 'New'), ('Contacted', 'Contacted'), ('Scheduled', 'Scheduled'), ('Closed', 'Closed')], default='New', max_length=20)),
            ],
            options={
                'verbose_name': 'Lead',
                'verbose_name_plural': 'Leads',
                'ordering': ['-created_at'],
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.UUIDField(default=core.helper.models.generate_uuid, editable=False, primary_key=True, serialize=False, unique=True)),
                ('visible', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=50, null=True)),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to=core.helper.media.MediaHelper.get_image_upload_path)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('description', models.TextField()),
                ('property_type', models.CharField(blank=True, choices=[('apartment', 'Apartment'), ('house', 'House'), ('studio', 'Studio'), ('villa', 'Villa'), ('duplex', 'Duplex'), ('bungalow', 'Bungalow'), ('penthouse', 'Penthouse'), ('townhouse', 'Townhouse'), ('condo', 'Condominium'), ('land', 'Land'), ('office', 'Office Space'), ('shop', 'Shop'), ('warehouse', 'Warehouse'), ('farm', 'Farm / Agricultural'), ('other', 'Other')], default='apartment', max_length=50, null=True)),
                ('property_listing', models.CharField(choices=[('Rent', 'Rent'), ('For Sale', 'For Sale')], default='Rent', max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('location', models.CharField(max_length=255)),
                ('bedrooms', models.PositiveIntegerField()),
                ('bathrooms', models.PositiveIntegerField()),
                ('sqft', models.PositiveIntegerField(help_text='Size in square feet')),
                ('is_available', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Property',
                'verbose_name_plural': 'Properties',
                'ordering': ['-created_at', '-updated_at', '-id'],
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='PropertyImage',
            fields=[
                ('id', models.UUIDField(default=core.helper.models.generate_uuid, editable=False, primary_key=True, serialize=False, unique=True)),
                ('visible', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(upload_to=core.helper.media.MediaHelper.get_image_upload_path)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='PropertySubscription',
            fields=[
                ('id', models.UUIDField(default=core.helper.models.generate_uuid, editable=False, primary_key=True, serialize=False, unique=True)),
                ('visible', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('property_type', models.CharField(blank=True, choices=[('apartment', 'Apartment'), ('house', 'House'), ('studio', 'Studio'), ('villa', 'Villa'), ('duplex', 'Duplex'), ('bungalow', 'Bungalow'), ('penthouse', 'Penthouse'), ('townhouse', 'Townhouse'), ('condo', 'Condominium'), ('land', 'Land'), ('office', 'Office Space'), ('shop', 'Shop'), ('warehouse', 'Warehouse'), ('farm', 'Farm / Agricultural'), ('other', 'Other')], max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Property Subscription',
                'verbose_name_plural': 'Property Subscriptions',
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='PropertyType',
            fields=[
                ('id', models.UUIDField(default=core.helper.models.generate_uuid, editable=False, primary_key=True, serialize=False, unique=True)),
                ('visible', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'ordering': ['title', 'created_at'],
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='PropertyViewing',
            fields=[
                ('id', models.UUIDField(default=core.helper.models.generate_uuid, editable=False, primary_key=True, serialize=False, unique=True)),
                ('visible', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Confirmed', 'Confirmed'), ('Cancelled', 'Cancelled')], default='Pending', max_length=20)),
                ('scheduled_time', models.DateTimeField()),
                ('notes', models.TextField(blank=True)),
                ('cancellation_reason', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Property Viewing',
                'verbose_name_plural': 'Property Viewings',
                'ordering': ['-scheduled_time'],
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
    ]
